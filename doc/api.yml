openapi: 3.0.3
info:
  title: Travel API
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /files:
    post:
      tags:
        - files
      operationId: uploadFile
      summary: Télécharger un fichier
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Fichier téléchargé avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileDB"
  /auth/login:
    post:
      tags:
        - auth
      operationId: authentication
      summary: Se connecter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        '200':
          description: Token
          content:
            application/json:
              schema:
                type: string
  /auth/register:
    post:
      tags:
        - auth
      operationId: register
      summary: Créer un compte
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Client"
      responses:
        '200':
          description: Token
          content:
            application/json:
              schema:
                type: string
  /step:
    put:
      tags:
        - step
      operationId: crupdateStep
      summary: Met à jour une étape du voyage si l'id est donné, sinon on le crée
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Step"
      responses:
        '200':
          description: L'étape créée ou mise à jour
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Step"
  /steps/search/findStepByTravelId:
    get:
      tags:
        - step
      operationId: getStepsByTravelId
      summary: Obtenir une liste des étapes du voyage
      parameters:
        - name: travelId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: La liste des étapes du voyage
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Step"
  /travels:
    put:
      tags:
        - travel
      operationId: crupdateTravel
      summary: Met à jour un voyage si l'id est donné, sinon on le crée
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Travel"
      responses:
        '200':
          description: Le voyage créé ou mis à jour
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Travel"
  /travel:
    get:
      tags:
        - travel
      operationId: getAllTravel
      summary: Obtenir la liste paginée de tous les voyages
      responses:
        '200':
          description: La liste paginée de tous les voyages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Travel"
  /travel/search/findTravelById:
    get:
      tags:
        - travel
      operationId: getTravelById
      summary: Obtenir un voyage demandé
      parameters:
        - name: travelId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Le voyage demandé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Travel"
  /travel/search/findTravelByName:
    get:
      tags:
        - travel
      operationId: getTravelByName
      summary: Rechercher des voyages par nom
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: La liste des voyages correspondants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Travel"
  /booking:
    put:
      tags:
        - booking
      operationId: crupdateBooking
      summary: Met à jour une réservation si l'id est donné, sinon on le crée
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Booking"
      responses:
        '200':
          description: La réservation créée ou mise à jour
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
  /bookings/search/findBookingByClientId:
    get:
      tags:
        - booking
      operationId: getBookingByClientId
      summary: Obtenir les réservations d'un client
      parameters:
        - name: clientId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: La liste des réservations du client
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Booking"
  /booking/total/{bookingId}:
    get:
      tags:
        - booking
      operationId: totalCost
      summary: Obtenir le coût total de la réservation
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Le coût total de la réservation
          content:
            application/json:
              schema:
                type: number
  /booking/validation/{reservation_id}:
    put:
      tags:
        - booking
      operationId: validateBooking
      summary: Valider une réservation
      parameters:
        - name: reservation_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: La réservation mise à jour
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
components:
  parameters:
    travel_id:
      name: travel_id
      required: true
      in: query
      schema:
        type: integer
    client_id:
      name: client_id
      required: true
      in: query
      schema:
        type: integer
    reservation_id:
      name: reservation_id
      required: true
      in: path
      schema:
        type: integer
  schemas:
    Travel:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        departure:
          type: string
        destination:
          type: string
        duration:
          type: integer
        pricePerClient:
          type: number
    Booking:
      type: object
      properties:
        id:
          type: integer
        isValidate:
          type: boolean
        travelId:
          type: integer
        clientId:
          type: integer
    Client:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        photo:
          type: string
    Step:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        travel_id:
          type: integer
    Login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    token:
      type: object
      properties:
        token:
          type: string
    FileDB:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          type: string
        data:
          type: string
          format: byte